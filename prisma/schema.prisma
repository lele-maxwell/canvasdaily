// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials authentication
  role         String         @default("USER") // USER, MODERATOR, ADMIN
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  prompts     Prompt[]
  submissions Submission[]
  comments    Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PromptCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String   @default("#3b82f6")
  icon        String   @default("palette")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  prompts Prompt[]
}

model Prompt {
  id                String         @id @default(cuid())
  title             String
  description       String         @db.Text
  categoryId        String
  tags              Json?          // JSON array of tags
  scheduledFor      DateTime
  isActive          Boolean        @default(false)
  createdBy         String
  allowedTypes      Json           // Array of allowed submission types: ["TEXT", "IMAGE", "VIDEO", "TEXT_IMAGE", "TEXT_VIDEO", "ALL"]
  maxSubmissions    Int            @default(1) // Max submissions per user
  submissionDeadline DateTime?     // Optional deadline for submissions
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  category    PromptCategory @relation(fields: [categoryId], references: [id])
  creator     User           @relation(fields: [createdBy], references: [id])
  submissions Submission[]

  @@index([scheduledFor])
  @@index([isActive])
  @@index([submissionDeadline])
}

model Submission {
  id              String    @id @default(cuid())
  userId          String
  promptId        String
  type            SubmissionType // TEXT, IMAGE, VIDEO, TEXT_IMAGE, TEXT_VIDEO, ALL
  textContent     String?   @db.Text
  imageUrl        String?
  videoUrl        String?
  thumbnailUrl    String?   // For video thumbnails
  title           String?
  description     String?   @db.Text
  submittedAt     DateTime  @default(now())
  isPublic        Boolean   @default(true)
  status          SubmissionStatus @default(PENDING)
  moderatorNotes  String?   @db.Text
  likes           Int       @default(0)
  views           Int       @default(0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  comments Comment[]

  @@unique([userId, promptId]) // One submission per user per prompt
  @@index([promptId])
  @@index([submittedAt])
  @@index([status])
  @@index([isPublic])
}

model Comment {
  id            String     @id @default(cuid())
  content       String     @db.Text
  createdAt     DateTime   @default(now())
  userId        String
  submissionId  String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}


enum SubmissionType {
  TEXT
  IMAGE
  VIDEO
  TEXT_IMAGE
  TEXT_VIDEO
  ALL
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}

// MySQL supports enums, so we use proper enum types
// UserRole: USER, MODERATOR, ADMIN (handled as String with validation)
// SubmissionType: TEXT, IMAGE, VIDEO, TEXT_IMAGE, TEXT_VIDEO, ALL
// SubmissionStatus: PENDING, APPROVED, REJECTED, FLAGGED